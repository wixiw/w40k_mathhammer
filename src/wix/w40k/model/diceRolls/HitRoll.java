/**
 * 
 */
package wix.w40k.model.diceRolls;

/**
 * @author wix
 * 
 */
public class HitRoll {

    private double attacks;
    private Skill skill;
    private int mod;
    private DiceResults explAtt;
    private DiceResults extraHits;

    /**
     * Configure the number of attacks (dices) in the roll
     * 
     * @param attacksCount
     */
    public void setAttacks(double attacksCount) {
	assert 0 <= attacksCount;
	attacks = attacksCount;
    }

    /**
     * Set the skill of the model making the roll
     * 
     * @param s
     */
    public void setSkill(Skill s) {
	assert 2 <= s.getValue() && s.getValue() <= 6;
	skill = s;
    }

    /**
     * Dice result modifier (+1, -1, ...)
     * 
     * @param modifier
     */
    public void setModifier(int modifier) {
	mod = modifier;
	throw new UnsupportedOperationException();// TODO implement associated
						  // behavior
    }

    /**
     * Extra attacks generated for each dice face (they will need to be rolled
     * again)
     * 
     * @param minFace
     *            minimal value to reach with the dice (equal or more)
     * @param extraAttacks
     *            number of new attacks generated by successful results
     */
    public void setAdditionnalAttacks(int minFace, int extraAttacks) {
	assert 0 < minFace;
	assert 0 < extraAttacks;

	explAtt.setValueForAtLeast(minFace, extraAttacks);
	throw new UnsupportedOperationException();// TODO implement associated
						  // behavior
    }

    /**
     * Extra auto-hits generated for each dice face (hence not rolled, cf tesla)
     * 
     * @param minFace
     *            minimal value to reach with the dice (equal or more)
     * @param extraHits
     *            number of new attacks generated by successful results
     */
    public void setAdditionnalHits(int minFace, int hits) {
	assert 0 < minFace;
	assert 0 < hits;

	extraHits.setValueForAtLeast(minFace, hits);
	throw new UnsupportedOperationException();// TODO implement associated
						  // behavior
    }

    /**
     * Roll the dices
     * 
     * @return the number of successfull hits
     */
    public double roll() {
	//Check that minimal configuration has been done
	if( attacks == 0 || skill.getValue() == 0)
		throw new IllegalArgumentException();
		
	DiceResults firstRoll = DiceResults.statsRollD6(attacks);
	
	return firstRoll.countSuccess(skill.getValue());
    }
}
